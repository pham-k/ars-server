// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sgen

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (pid, phone, country_code, password_hash)
VALUES ($1, $2, $3, $4)
RETURNING pid, phone, country_code
`

type CreateUserParams struct {
	Pid          string `json:"pid"`
	Phone        string `json:"phone"`
	CountryCode  string `json:"country_code"`
	PasswordHash string `json:"password_hash"`
}

type CreateUserRow struct {
	Pid         string `json:"pid"`
	Phone       string `json:"phone"`
	CountryCode string `json:"country_code"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Pid,
		arg.Phone,
		arg.CountryCode,
		arg.PasswordHash,
	)
	var i CreateUserRow
	err := row.Scan(&i.Pid, &i.Phone, &i.CountryCode)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByPID = `-- name: GetUserByPID :one

SELECT id, pid, phone, country_code, password_hash, validated, version, updated_at, created_at
FROM "user"
WHERE pid = $1
`

// db/query/users.sql
func (q *Queries) GetUserByPID(ctx context.Context, pid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPID, pid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.Phone,
		&i.CountryCode,
		&i.PasswordHash,
		&i.Validated,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, pid, phone, country_code, password_hash, validated, version, updated_at, created_at
FROM "user"
WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.Phone,
		&i.CountryCode,
		&i.PasswordHash,
		&i.Validated,
		&i.Version,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, pid, phone, country_code, password_hash, validated, version, updated_at, created_at
FROM "user"
LIMIT 5
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Pid,
			&i.Phone,
			&i.CountryCode,
			&i.PasswordHash,
			&i.Validated,
			&i.Version,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET pid = $2,
    phone = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID    int64  `json:"id"`
	Pid   string `json:"pid"`
	Phone string `json:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Pid, arg.Phone)
	return err
}
